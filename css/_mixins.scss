$breakpoint-small: 768px;
$breakpoint-med-small: 1024px;
$breakpoint-med: 1175px;
@mixin screen($size, $type: max, $pixels: $breakpoint-small) {
  @if $size == 'small' {
    @media screen and ($type + -width: $breakpoint-small) {
      @content;
    }
  } @else
  if $size == 'med-small' {
    @media screen and ($type + -width: $breakpoint-med-small) {
      @content;
    }
  } @else
  if $size == 'med' {
    @media screen and ($type + -width: $breakpoint-med) {
      @content;
    }
  } @else
  if $size == 'large' {
    @media screen and ($type + -width: $breakpoint-med) {
      @content;
    }
  } @else
  if $size == 'custom' {
    @media screen and ($type + -width: $pixels + px) {
      @content;
    }
  } @else {
    @content;
  }
}
@function calcR($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}
@mixin background($imgpath,$positionx: center,$positiony: top,$size: 100%,$repeat: no-repeat) {
  background: {
    image: url($imgpath);
    position-x: $positionx;
    position-y: $positiony;
    repeat: $repeat;
    size: $size;
  }
}
// d-flex
@mixin flex {
  display: -webkit-box !important;
  display: -moz-box !important;
  display: -webkit-flex !important;
  display: -ms-flexbox !important;
  display: flex !important;
}
// d-flex align-items-center justify-content-center
@mixin flexaj($align:center,$justify:center) {
  display: -webkit-box !important;
  display: -moz-box !important;
  display: -webkit-flex !important;
  display: -ms-flexbox !important;
  display: flex !important;
  @if $align == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else
  if $align == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $align;
    -moz-box-align: $align;
    -ms-flex-align: $align;
  }
  -webkit-align-items: $align;
  align-items: $align;

  @if $justify == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else
  if $justify == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else
  if $justify == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else
  if $justify == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $justify;
    -moz-box-pack: $justify;
    -ms-flex-pack: $justify;
  }
  -webkit-justify-content: $justify;
  justify-content: $justify;
}
// flex-wrap, flex-column
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value !important;
  -ms-flex-direction: $value !important;
  flex-direction: $value !important;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}
